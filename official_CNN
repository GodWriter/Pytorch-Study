#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jan  7 21:22:53 2018

@author: godwriter
"""

import torch
import torchvision
import numpy as np
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import matplotlib.pyplot as plt
import torchvision.transforms as transforms
from torch.autograd import Variable

transform = transforms.Compose(
        [transforms.ToTensor(),#normalize(mean, std) sequence of means for each channel, sequence standard deviations for each channel. input[channel] = (input[channel] - mean[channel]) / std[channel]
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])#change the data with the method of compose(),first turn in to tensor, second to normalize

trainset = torchvision.datasets.CIFAR10(root='/home/godwriter/zhu/data',
                                        train=True, download=False, transform=transform)#the file directory just in /data is ok
trainloader = torch.utils.data.DataLoader(trainset, batch_size=10,
                                          shuffle=False, num_workers=2)#you can change the batch_size if you wannt, it just decide the number of image you input when train the CNN each time
testset = torchvision.datasets.CIFAR10(root='/home/godwriter/zhu/data',
                                       train=False, download=False, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

'''
def imshow(img):
    img = img / 2 + 0.5
    npimg = img.numpy()#change the tensor into numpy
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    
dataiter = iter(trainloader)
images, labels = next(dataiter)#get four images and labels and save , pay attention to the next, it has been changed in py3.0
imshow(torchvision.utils.make_grid(images))#torchvision.utils.make_grid make a grid of images

print(' '.join('%5s' % classes[labels[j]] for j in range(4)))#get the classification name according to the classes
'''

class Net(nn.Module):
    
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)
        
    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x
    
net = Net()
net.cuda()

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

for epoch in range(2):
    
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):#enumerate return a truple of (i, data), 0 means i begin from 0
        #get the inputs
        inputs, labels = data#inputs[4, 3, 32, 32],labels[4]
        
        #wrap them in Variable
        inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
        
        #zero the parameter gradients
        optimizer.zero_grad()
        
        #forward + backward + optimize
        outputs = net(inputs) #put 4 images each time into the CNN
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        #Print statistics
        running_loss += loss.data[0]
        if i % 2000 == 1999:
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 20000))
            running_loss = 0.0
print('Finish Training')
