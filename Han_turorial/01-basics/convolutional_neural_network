import torch
import torch.nn as nn
import torchvision.datasets as dsets
import torchvision.transforms as transforms
from torch.autograd import Variable

#全局参数
num_epochs = 5 #训练论述
batch_size = 100 #每批训练数据个数
learning_rate = 0.001 #学习速率

#加载MNIST数据集
train_dataset = dsets.MNIST(root='E:/Code_package/pythonwork/Pytorch/data/MNIST', 
                            train=True, transform=transforms.ToTensor(), download=False)
test_dataset = dsets.MNIST(root='E:/Code_package/pythonwork/Pytorch/data/MNIST',
                           train=False, transform=transforms.ToTensor(), download=False)

#切分数据集
train_loader = torch.utils.data.DataLoader(dataset=train_dataset,batch_size=batch_size,
                                           shuffle=True)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset,batch_size=batch_size,
                                          shuffle=True)

#卷积模型(2个卷积层)
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__() #父类继承CNN
        self.layer1 = nn.Sequential(
                nn.Conv2d(1, 16, kernel_size=5, padding=2), #卷积层，卷积核16*5*5*1，输出16通道，输入为1通道
                nn.BatchNorm2d(16),
                nn.ReLU(),
                nn.MaxPool2d(2))
        self.layer2 = nn.Sequential(
                nn.Conv2d(16, 32, kernel_size=5,padding=2),
                nn.BatchNorm2d(32),
                nn.ReLU(),
                nn.MaxPool2d(2))
        self.fc = nn.Linear(7*7*32, 10)
        
    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = out.view(out.size(0), -1)
        out = self.fc(out)
        return out
    
cnn = CNN()

#Loss and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(cnn.parameters(), lr=learning_rate)

#Train the Model
for epoch in range(num_epochs):
    for i, (images,labels) in enumerate(train_loader):
        images = Variable(images)
        labels = Variable(labels)
        
        #Forward + Backward + Optimize
        optimizer.zero_grad()
        outputs = cnn(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        if(i+1) % 100 == 0:
            print('Epoch [%d/%d], Iter [%d/%d] Loss:%.4f'
                  %(epoch+1, num_epochs, i+1, len(train_dataset)//batch_size, loss.data[0]))
            
#Test the Model
cnn.eval()
correct = 0
total = 0
for images, lables in test_loader:
    images = Variable(images)
    outputs = cnn(images)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum()
    
print('Test Accuracy of the model on the 10000 test images:%d %%'%(100 * correct/total))
