import torch
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as plt
from torch.autograd import Variable

#global parameters
input_size = 1
output_size=  1
num_epochs = 1000
learning_rate = 0.001

#Toy Dataset
x_train = np.array([[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]],dtype=np.float32)
y_train = np.array([[1],[3],[5],[7],[9],[11],[13],[15],[17],[19]],dtype=np.float32)

#Linear Regression Module
class LinearRegression(nn.Module):
    def __init__(self, input_size, output_size):
        super(LinearRegression, self).__init__()
        self.linear = nn.Linear(input_size, output_size)
        
    def forward(self, x):
        out = self.linear(x)
        return out
    
model = LinearRegression(input_size, output_size)

#Loss and Optimizer
criterion = nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

#Train the Model
for epoch in range(num_epochs):
    #Convert numpy array to torch Variable
    inputs = Variable(torch.from_numpy(x_train))
    targets = Variable(torch.from_numpy(y_train))
    
    #Forward + Backward + Optimize
    optimizer.zero_grad()
    outputs = model(inputs)
    loss = criterion(outputs, targets)
    loss.backward()
    optimizer.step()
    
    if(epoch+1)%5 == 0:
        print('Epoch [%d/%d], Loss:%.4f'%(epoch+1, num_epochs, loss.data[0]))
        
#Plot the graph
predicted = model(Variable(torch.from_numpy(x_train))).data.numpy()
plt.plot(x_train, y_train, 'ro', label='Original data')
plt.plot(x_train, predicted, label='Fitted line')
plt.legend()
plt.show()
